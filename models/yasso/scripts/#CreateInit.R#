filename = 'filter_input_yasso'
ensemble_size <- 50
state_vector_size <- 6
loc_vector <- rep(1, state_vector_size)

x <- as.matric(read.table('ens_projection.dat'))


write('netcdf filter_input {', file=filename)
write('dimensions:', file=filename, sep='\n',append=TRUE)
write(paste('	member =', ensemble_size, ';'), file=filename, sep='\n',append=TRUE)
write('	metadatalength = 32 ;', file=filename, sep='\n',append=TRUE)
write(paste('	location = ', state_vector_size, ';'), file=filename, sep='\n',append=TRUE)
write('	time = UNLIMITED ; // (1 currently)', file=filename, sep='\n',append=TRUE)
write('variables:', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	char MemberMetadata(member, metadatalength) ;', file=filename, sep='\n',append=TRUE)
write('		MemberMetadata:long_name = "description of each member" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double location(location) ;', file=filename, sep='\n',append=TRUE)
write('		location:short_name = "loc1d" ;', file=filename, sep='\n',append=TRUE)
write('		location:long_name = "Field number" ;', file=filename, sep='\n',append=TRUE)
write('		location:dimension = 1 ;', file=filename, sep='\n',append=TRUE)
write('		location:valid_range = 1., 10. ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double state(time, member, location) ;', file=filename, sep='\n',append=TRUE)
write('		state:long_name = "the ensemble of model states" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double state_priorinf_mean(time, location) ;', file=filename, sep='\n',append=TRUE)
write('		state_priorinf_mean:long_name = "prior inflation value" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double state_priorinf_sd(time, location) ;', file=filename, sep='\n',append=TRUE)
write('		state_priorinf_sd:long_name = "prior inflation standard deviation" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double state_postinf_mean(time, location) ;', file=filename, sep='\n',append=TRUE)
write('		state_postinf_mean:long_name = "posterior inflation value" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double state_postinf_sd(time, location) ;', file=filename, sep='\n',append=TRUE)
write('		state_postinf_sd:long_name = "posterior inflation standard deviation" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double time(time) ;', file=filename, sep='\n',append=TRUE)
write('		time:long_name = "valid time of the model state" ;', file=filename, sep='\n',append=TRUE)
write('		time:axis = "T" ;', file=filename, sep='\n',append=TRUE)
write('		time:cartesian_axis = "T" ;', file=filename, sep='\n',append=TRUE)
write('		time:calendar = "none" ;', file=filename, sep='\n',append=TRUE)
write('		time:units = "years" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('	double advance_to_time ;', file=filename, sep='\n',append=TRUE)
write('		advance_to_time:long_name = "desired time at end of the next model advance" ;', file=filename, sep='\n',append=TRUE)
write('		advance_to_time:axis = "T" ;', file=filename, sep='\n',append=TRUE)
write('		advance_to_time:cartesian_axis = "T" ;', file=filename, sep='\n',append=TRUE)
write('		advance_to_time:calendar = "none" ;', file=filename, sep='\n',append=TRUE)
write('		advance_to_time:units = "years" ;', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write('// global attributes:', file=filename, sep='\n',append=TRUE)
write('		:title = "an ensemble of spun-up model states" ;', file=filename, sep='\n',append=TRUE)
write('                :version = "$Id: $" ;', file=filename, sep='\n',append=TRUE)
write('		:model = "Yasso" ;', file=filename, sep='\n',append=TRUE)
write('		:model_forcing = 8. ;', file=filename, sep='\n',append=TRUE)
write('		:model_deltat = 0.05 ;', file=filename, sep='\n',append=TRUE)
write('		:history = "Varied initial states based on prior drivers" ;', file=filename, sep='\n',append=TRUE)
write('data:', file=filename, sep='\n',append=TRUE)
write('', file=filename, sep='\n',append=TRUE)
write(' MemberMetadata =', file=filename, sep='\n',append=TRUE)

for (ii in 1:ensemble_size-1){
  write(paste('  "ensemble member      ',ii,'",', collapse=''), file=filename, sep='\n',append=TRUE)
  
}
write(paste('  "ensemble member      ',ensemble_size,'";', collapse=''), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(paste(' location =', paste(rep(1, state_vector_size),collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write('state =', file=filename, sep='\n',append=TRUE)
write(paste('   ', paste(as.vector(t(x)), collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' state_priorinf_mean =', file=filename, sep='\n',append=TRUE)
write(paste('  ', paste(rep(1, state_vector_size),collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' state_priorinf_sd =', file=filename, sep='\n',append=TRUE)
write(paste('  ', paste(rep(0.6, state_vector_size),collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' state_postinf_mean =', file=filename, sep='\n',append=TRUE)
write(paste('  ', paste(rep(1, state_vector_size),collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' state_postinf_sd =', file=filename, sep='\n',append=TRUE)
write(paste('  ', paste(rep(0.6, state_vector_size),collapse=", "), ";"), file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' time = 1. ;', file=filename, sep='\n',append=TRUE)

write('', file=filename, sep='\n',append=TRUE)
write(' advance_to_time = 1. ;', file=filename, sep='\n',append=TRUE)